# -*- coding: utf-8 -*-
"""Practica4_Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/DCDPUAEM/DCDP/blob/main/01%20Programaci%C3%B3n%20en%20Python/notebooks/exercises/Practica4_Pandas.ipynb

<a href="https://colab.research.google.com/github/DCDPUAEM/DCDP/blob/main/01%20Programaci%C3%B3n%20en%20Python/notebooks/exercises/Practica4_Pandas.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""### __Data set de vinos del mundo__

Esta es una versi√≥n reducida de la base de datos [winemag-data](https://gist.github.com/clairehq/79acab35be50eaf1c383948ed3fd1129), que contiene una rese√±a en ingl√©s sobre una gran cantidad de vinos del mundo.

### __Descripci√≥n de los campos__

 - **country**: El pa√≠s de donde proviene el vino
 - **description** : Algunas frases de un sommelier que describen el sabor, olor, apariencia, sensaci√≥n, etc. del vino.
 - **designation**: La denominaci√≥n. El vi√±edo dentro de la bodega de donde proceden las uvas que elaboraron el vino.
 - **points**: la cantidad de puntos que WineEnthusiast calific√≥ al vino en una escala del 1 al 100 (aunque dicen que solo publican rese√±as de vinos con una puntuaci√≥n> = 80).
 - **price**: El costo de una botella de vino.
 - **province**: La provincia o estado de donde proviene el vino
 - **region_1**: el √°rea de cultivo de vino en una provincia o estado (es decir, Napa)
 - **region_2**: a veces hay regiones m√°s espec√≠ficas, especificadas dentro de un √°rea de cultivo del vino (es decir, Rutherford dentro del Valle de Napa), pero este valor a veces puede estar en blanco.
 - **taster_name**: nombre de la persona que prob√≥ y revis√≥ el vino.
 - **taster_twitter_handle**: identificador de Twitter para la persona que prob√≥ y revis√≥ el vino.
 - **title**: el t√≠tulo de la rese√±a de vinos, que a menudo contiene la cosecha si est√° interesado en extraer esa caracter√≠stica.
 - **variety**: la variedad: el tipo de uva utilizada para elaborar el vino (es decir, Pinot Noir).
 - **winery**: la bodega que hizo el vino.

### TEST
"""

# Fetch the dataset using the raw GitHub URL.
!curl --remote-name \
     -H 'Accept: application/vnd.github.v3.raw' \
     --location https://raw.githubusercontent.com/DCDPUAEM/DCDP/main/01%20Programaci%C3%B3n%20en%20Python/data/winemag-data-less.csv

# leemos el dataframe usando read_csv
df = pd.read_csv("winemag-data-less.csv")
print(df.info())
df.head(3)

#Tiremos la columna Unnamed
df.drop('Unnamed: 0',axis=1,inplace=True)
df.head(3)

"""### __Veamos cuantas rese√±as de vinos mexicanos tenemos.__

#### &#9758; Construye una nueva Tabla con las rese√±as de vinos mexicanos.
- Qu√©date **s√≥lo** con las siguientes columnas: `['country','winery','variety','description','points','price']`
- Haz que el √≠ndice se reinicie en 0.
- Guarda este DataFrame en la variable vinosMX.
"""

"""
SECUENCIA:
1. Ubicar todos los registros de M√©xico usando indexaci√≥n booleana
2. De este DataFrame resultante, extraer solamente las columnas solicitadas.
3. Reiniciar el √≠ndice usando reset_index()
4. Tirar (drop) la nueva columna index
5. Asignar el resultado de este proceso a la variable vinosMX
"""
# TU CODIGO
# 1. Ubicar todos los registros de M√©xico usando indexaci√≥n booleana
vinosMX = df[df['country']=='Mexico']

# 2. De este DataFrame resultante, extraer solamente las columnas solicitadas.
vinosMX = vinosMX[['country','winery','variety','description','points','price']]

# 3. Reiniciar el √≠ndice usando reset_index()
vinosMX = vinosMX.reset_index()

# 4. Tirar (drop) la nueva columna index
vinosMX = vinosMX.drop('index',axis=1)
vinosMX

"""### __Veamos cuantas rese√±as de vinos por pa√≠s tenemos.__

#### &#9758; Muestra en una gr√°fica de barras la distribuci√≥n del n√∫mero de rese√±as por pa√≠s (_top 10_).

#### Puedes auxiliarte con alguna de estos m√©todos de Pandas:
 - [pandas.DataFrame.count](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.count.html)
 - [pandas.Series.value_counts](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.value_counts.html)
 - [pandas.Series.index](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.index.html)
 - [pandas.Series.values](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.values.html)
"""

"""
SECUENCIA:
1. Ubicar el nombre de la columna de pa√≠s
2. Sobre esta columna, obtener la Serie correspondiente
3. Hacer un conteo de los valores √∫nicos sobre esta Serie

4. X en la gr√°fica de barras son los pa√≠ses (√≠ndice de la Serie)
5. Y en la gr√°fica de barras son los conteos por pa√≠s (values de la Serie)
6. Usar Seaborn para graficar el diagrama de barras
7. Rotular la gr√°fica y los ejes
"""
# 1. Ubicar el nombre de la columna de pa√≠s
# 2. Sobre esta columna, obtener la Serie correspondiente
# 3. Hacer un conteo de los valores √∫nicos sobre esta Serie
conteos=df.country.value_counts()

# 4. X en la gr√°fica de barras son los pa√≠ses (√≠ndice de la Serie)
# 5. Y en la gr√°fica de barras son los conteos por pa√≠s (values de la Serie)
x = conteos.index
y = conteos.values

plt.figure(figsize=(16,7))
# Define colors for each bar
colors = ['blue', 'orange', 'green', 'red', 'purple', 'brown', 'pink', 'gray', 'cyan', 'magenta']

# Create the bar plot with specified colors
sns.barplot(x=x[:10], y=y[:10], palette="hls")

# En una sola l√≠nea:
#sns.barplot(df.country.value_counts().index[:10], df.country.value_counts().values[:10])

plt.xlabel("Pa√≠ses")
plt.ylabel("N√∫mero de vinos")
plt.title("Rese√±as por pa√≠s (Top 10)")

plt.show()

"""### __Veamos ahora cu√°l es el precio promedio por cada pa√≠s.__

#### &#9758; Muestra en una gr√°fica de barras el precio promedio por pa√≠s, en orden descendente (_top 10_).

Puedes consultar:
 - [pandas.DataFrame.groupby](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.groupby.html)

#### &#9758; ¬øCu√°l ser√≠a el precio promedio por variedad?

üôÇ __Escribe la secuencia de pasos que tendr√≠as que realizar.__
"""

df.columns

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Suponiendo que tienes un DataFrame llamado df con las columnas proporcionadas

# 1. Calcular el precio promedio por pa√≠s
precio_promedio_por_pais = df.groupby('country')['price'].mean()

# 2. Ordenar los resultados en orden descendente seg√∫n el precio promedio
precio_promedio_por_pais = precio_promedio_por_pais.sort_values(ascending=False)

# 3. Seleccionar los 10 primeros pa√≠ses
top_10_paises = precio_promedio_por_pais.head(10)

# 4. Graficar los resultados en una gr√°fica de barras
plt.figure(figsize=(12, 6))
sns.barplot(x=top_10_paises.index, y=top_10_paises.values)
plt.xlabel('Pa√≠s')
plt.ylabel('Precio Promedio (D√≥lares)')
plt.title('Precio Promedio por Pa√≠s (Top 10)')
plt.xticks(rotation=45)  # Rotar las etiquetas del eje x para una mejor legibilidad
plt.show()

# ¬øCu√°l ser√≠a el precio promedio por variedad?
precio_promedio_por_variedad = df.groupby('variety')['price'].mean()
print(precio_promedio_por_variedad)

"""#### Agregando anotaciones a nuestros gr√°ficos

Es posible agregar informaci√≥n a nuestros gr√°ficos, en forma de texto, o dibujos (e.g. flechas, l√≠neas, c√≠rculos, etc.). Para ello, se utiliza la anotaci√≥n (annotate) de ejes (axes). Detallar aqu√≠ c√≥mo funciona nos llevar√≠a mucho tiempo. Puedes consultar la documentaci√≥n en estas ligas:

- [matplotlib.Artist](https://matplotlib.org/3.3.3/api/artist_api.html#matplotlib.artist.Artist)
    - [Artist tutorial](https://matplotlib.org/3.3.3/tutorials/intermediate/artists.html)
- [matplotlib.axes](https://matplotlib.org/3.3.3/api/axes_api.html#matplotlib.axes.Axes)
- [matplotlib.patches.Patch](https://matplotlib.org/3.3.3/api/axes_api.html#matplotlib.axes.Axes)
- [matplotlib.patches.Rectangle](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.patches.Rectangle.html)
- [matplotlib.pyplot.annotate](https://matplotlib.org/3.3.3/api/_as_gen/matplotlib.pyplot.annotate.html)
"""

#Definimos el tama√±o del canvas
plt.figure(figsize=(16,7))

# la variable "ax" (axes) contiene la informaci√≥n  del gr√°fico de barras.
# En particular, contiene todo lo relativo a los parches (rect√°ngulos) del barplot.
ax = sns.barplot(x=x[:10], y=y[:10])

# Recorremos cada rect√°ngulo
for p in ax.patches:
    ax.annotate("%.2f" % p.get_height(),\
                (p.get_x() + p.get_width() / 2., p.get_height()),\
                ha='center', va='center', fontsize=11, color='gray',\
                xytext=(0, 10),\
                textcoords='offset points')

plt.show()

"""### __Ahora queremos darnos una idea de cu√°les podr√≠an ser los pa√≠ses cuyos vinos tienen una mejor raz√≥n calidad-precio en promedio.__

#### &#9758; Muestra en una gr√°fica de barras la raz√≥n puntos/precio promedio por pa√≠s, en orden descendente (_top 10_). Muestra los valores de la raz√≥n sobre cada barra.

‚úã __Recuerda que si divides entre 0 o Nan obtendr√°s inf o nan__

üôÇ __Escribe la secuencia de pasos que tendr√≠as que realizar.__
"""

plt.figure(figsize=(8,4))
sns.boxplot(x=df.points)
plt.title("Boxplot del puntaje (calidad)")
plt.show()

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(10, 5))

# 1. Calcular la raz√≥n calidad/precio por pa√≠s
promedios = df.groupby('country').apply(lambda x: x['points'].mean() / x['price'].mean())

# 2. Ordenar los resultados en orden descendente seg√∫n la raz√≥n calidad/precio
promedios = promedios.sort_values(ascending=False)

# 3. Seleccionar los 10 primeros pa√≠ses
top_10_paises = promedios.head(10)

# 4. Graficar los resultados en una gr√°fica de barras
ax = sns.barplot(x=top_10_paises.index, y=top_10_paises.values)
plt.title("Mejor raz√≥n calidad/precio por pa√≠s (Top 10)")
plt.xlabel("Pa√≠s")
plt.xticks(rotation=45, ha="right")
plt.ylabel("Raz√≥n Puntos/Precio")

# A√±adir etiquetas con los valores en cada barra
for p in ax.patches:
    ax.annotate("%.2f" % p.get_height(), (p.get_x() + p.get_width() / 2., p.get_height()),
                 ha='center', va='center', fontsize=11, color='gray', xytext=(0, 10),
                 textcoords='offset points')

plt.show()

"""### __¬øQu√© vinos tienen la mejor puntuaci√≥n y a qu√© pa√≠ses pertenecen?__

#### &#9758; Muestra en una gr√°fica de pastel la proporci√≥n de los pa√≠ses que tienen los 20 mejores vinos; es decir, los primeros 20 de mayor puntaje.  
"""

import matplotlib.pyplot as plt

# 1. Ordenar los vinos seg√∫n su puntuaci√≥n en orden descendente
top_vinos = df.nlargest(20, 'points')

# 2. Seleccionar los primeros 20 vinos con la mejor puntuaci√≥n
top_vinos_paises = top_vinos['country']

# 3. Obtener los pa√≠ses a los que pertenecen estos vinos
conteo_paises = top_vinos_paises.value_counts()

# 4. Graficar la proporci√≥n de los pa√≠ses en una gr√°fica de pastel
plt.figure(figsize=(8, 8))
plt.pie(conteo_paises, labels=conteo_paises.index, autopct='%1.1f%%', startangle=140)
plt.title('Proporci√≥n de los pa√≠ses con los 20 mejores vinos')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

"""### __¬øCu√°les son las 10 variedades de uva m√°s abundantes y en qu√© proporci√≥n?__

#### &#9758; Da una soluci√≥n utilizando s√≥lo dos l√≠neas de c√≥digo
"""

#TU CODIGO
#variedades = #<COMPLETA>
variedades = df['variety'].value_counts().head(10)
variedades

"""### __¬øCu√°les son las 20 bodegas m√°s mencionadas y en qu√© proporci√≥n?__

#### &#9758; Da una soluci√≥n utilizando s√≥lo dos l√≠neas de c√≥digo
"""

#TU CODIGO
bodegas = df['winery'].value_counts().head(10)
bodegas

"""### __Vamos ahora a construir una nueva tabla de informaci√≥n__

#### &#9758; Construye una tabla que muestre pa√≠s, variedad de uva, bodega, y valores de puntuaci√≥n y precio.
- Considera las 10 variedades de uva y las 20 bodegas m√°s importantes.
- Haz una tabla con estos datos y s√≥lo los valores de pa√≠s, bodega, variedad, puntuaci√≥n y precio correspondientes.
- Agrega una columna con el valor de puntos/precio
- Cambia el nombre de la bodega para que √©ste incluya su pa√≠s de origen.
- Ordena los datos por nombre de pa√≠s, variedad y bodega (orden ascendente).
"""

# Paso 1: Filtrar el DataFrame original
top_variedades = df['variety'].value_counts().head(10).index.tolist()
top_bodegas = df['winery'].value_counts().head(20).index.tolist()
filtered_df = df[df['variety'].isin(top_variedades) & df['winery'].isin(top_bodegas)]

# Paso 2: Seleccionar solo las columnas relevantes
relevant_columns = ['country', 'winery', 'variety', 'points', 'price']
filtered_df = filtered_df[relevant_columns]

# Paso 3: Calcular el valor de puntos/precio
filtered_df['points/price'] = filtered_df['points'] / filtered_df['price']

# Paso 4: Cambiar el nombre de la bodega para que incluya su pa√≠s de origen
filtered_df['winery'] = filtered_df['country'] + ' - ' + filtered_df['winery']

# Paso 5: Ordenar los datos por nombre de pa√≠s, variedad y bodega
filtered_df = filtered_df.sort_values(by=['country', 'variety', 'winery'], ascending=True)

# Almacenar el nuevo DataFrame en la variable p_v
p_v = filtered_df.copy()

"""#### &#9758; Observa la relaci√≥n puntos-precio por pa√≠s"""

sns.relplot(x="points", y="price", hue="country", col='country',kind="line", data=p_v)

"""#### &#9758; Observa las distribuciones por pares en funci√≥n de la variedad de uva."""

sns.pairplot(p_v, hue="variety",height=3,palette='rocket')

"""#### &#9758; Observa las distribuciones por pares en funci√≥n del pa√≠s.

1.   Elemento de la lista
2.   Elemento de la lista


"""

#TU CODIGO
import seaborn as sns

# Crear las distribuciones por pares en funci√≥n del pa√≠s
sns.pairplot(p_v, hue='country')
plt.show()

"""#### &#9758; Observa las distribuciones por pares en funci√≥n de la bodega."""

#TU CODIGO
import seaborn as sns

# Crear las distribuciones por pares en funci√≥n de la bodega
sns.pairplot(p_v, hue='winery')
plt.show()

"""#### &#9758; Observa las distribuciones (scatter) de precio por variedad de uva.

> Agregar bloque entrecomillado


"""

#TU CODIGO
import seaborn as sns
import matplotlib.pyplot as plt

# Crear un gr√°fico de dispersi√≥n de precio por variedad de uva
plt.figure(figsize=(10, 6))
sns.scatterplot(data=p_v, x='variety', y='price', alpha=0.7)
plt.xlabel('Variedad de Uva')
plt.ylabel('Precio')
plt.title('Distribuci√≥n de Precio por Variedad de Uva')
plt.xticks(rotation=45, ha='right')
plt.tight_layout()
plt.show()

"""#### &#9758; Observa las distribuciones (scatter) de precio por bodega."""

#TU CODIGO
import seaborn as sns
import matplotlib.pyplot as plt

# Crear un gr√°fico de dispersi√≥n de precio por bodega
plt.figure(figsize=(10, 6))
sns.scatterplot(data=p_v, x='winery', y='price', alpha=0.7)
plt.xlabel('Bodega')
plt.ylabel('Precio')
plt.title('Distribuci√≥n de Precio por Bodega')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

"""#### &#9758; Observa las distribuciones (scatter) de puntos/precio por bodega."""

#TU CODIGO
import seaborn as sns
import matplotlib.pyplot as plt

# Crear un gr√°fico de dispersi√≥n de puntos/precio por bodega
plt.figure(figsize=(10, 6))
sns.scatterplot(data=p_v, x='winery', y='points/price', alpha=0.7)
plt.xlabel('Bodega')
plt.ylabel('Puntos/Precio')
plt.title('Distribuci√≥n de Puntos/Precio por Bodega')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

"""#### &#9758; Observa las distribuciones (scatter) de puntos/precio por pa√≠s."""

#TU CODIGO
import seaborn as sns
import matplotlib.pyplot as plt

# Crear un gr√°fico de dispersi√≥n de puntos/precio por pa√≠s
plt.figure(figsize=(10, 6))
sns.scatterplot(data=p_v, x='country', y='points/price', alpha=0.7)
plt.xlabel('Pa√≠s')
plt.ylabel('Puntos/Precio')
plt.title('Distribuci√≥n de Puntos/Precio por Pa√≠s')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

"""### __Agrega los datos de M√©xico a esta √∫ltima tabla de informaci√≥n__

#### &#9758; Une la tabla de vinosMX a la tabla p_v
- Aseg√∫rate de __no agregar__ la columna de descripci√≥n
"""

# Suponiendo que 'vinosMX' es el DataFrame que contiene los datos de vinos de M√©xico

# Renombrar la columna 'bodega' en 'vinosMX' para que coincida con la columna en 'p_v'
vinosMX = vinosMX.rename(columns={'bodega': 'winery'})

# Eliminar la columna de descripci√≥n si existe en 'vinosMX'
if 'description' in vinosMX.columns:
    vinosMX = vinosMX.drop(columns=['description'])

# Unir las tablas utilizando la columna 'country' como clave de uni√≥n
df3 = pd.merge(p_v, vinosMX, on='country', how='outer')

# Mostrar la tabla completa
print(df3)

"""#### &#9758; Calcula los valores de points/price para los vinos de M√©xico
- TIP: Usa el m√©todo apply sobre `df3[['points','price','points/price']]`
"""

# Paso 1: Filtrar el DataFrame para incluir solo los vinos de M√©xico
vinos_mexico = df3[df3['country'] == 'Mexico']

# Paso 2: Calcular los valores de points/price
vinos_mexico['points/price'] = vinos_mexico['points_y'] / vinos_mexico['price_y']

# Paso 3: Mostrar el resultado
print(vinos_mexico[['country', 'winery_y', 'variety_y', 'points_y', 'price_y', 'points/price']])

"""#### &#9758; Observa la relaci√≥n puntos-precio por pa√≠s"""

import seaborn as sns
import matplotlib.pyplot as plt

# Crear un gr√°fico de dispersi√≥n con l√≠neas de regresi√≥n para cada pa√≠s
sns.lmplot(x="points_x", y="price_x", hue="country", col='country', data=df3, scatter_kws={'alpha':0.7})
plt.show()

"""#### &#9758; Observa las distribuciones por pares en funci√≥n del pa√≠s.
- Construye una tabla auxiliar "mx_top", donde los datos de M√©xico (en df3) aparezcan al final de la tabla mx_top.
"""

# Separar los datos de M√©xico del resto de los pa√≠ses
mx_data = df3[df3['country'] == 'Mexico']
non_mx_data = df3[df3['country'] != 'Mexico']

# Concatenar los datos no mexicanos con los datos de M√©xico al final
mx_top = pd.concat([non_mx_data, mx_data])

# Visualizar las distribuciones por pares en funci√≥n del pa√≠s
sns.pairplot(mx_top, hue="country", height=3, palette='bright')
plt.show()

"""#### &#9758; Observa las distribuciones (scatter) de puntos por pa√≠s."""

import seaborn as sns
import matplotlib.pyplot as plt

# Crear un gr√°fico de dispersi√≥n de puntos por pa√≠s
plt.figure(figsize=(10, 5))
sns.stripplot(x="country", y="points_x", data=df3, dodge=True, palette='deep', marker='*', size=8)
plt.xticks(rotation=45, ha="right")
plt.xlabel('Pa√≠s')
plt.ylabel('Puntos')
plt.title('Distribuci√≥n de Puntos por Pa√≠s')
plt.tight_layout()
plt.show()

"""#### &#9758; Observa las distribuciones (scatter) de precios por bodega."""

import seaborn as sns
import matplotlib.pyplot as plt

# Crear un gr√°fico de dispersi√≥n de precios por bodega
plt.figure(figsize=(10, 6))
sns.scatterplot(data=mx_top, x='winery_x', y='price_x', alpha=0.7)
plt.xlabel('Bodega')
plt.ylabel('Precio')
plt.title('Distribuci√≥n de Precios por Bodega')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

"""#### &#9758; Observa las distribuciones (scatter) de puntos/precio por bodega.
- Dibuja una l√≠nea que marque el promedio de todos los datos
- Dibuja marcas ubicadando los valores promedio por cada bodega (TIP: usa `groupby` sobre pa√≠s y bodega para calcular primero los valores promedio)
"""

mx_top.head()

import seaborn as sns
import matplotlib.pyplot as plt

# Calcular los valores promedio por cada bodega
medias = mx_top.groupby(['country', 'winery_x'])['points/price'].mean().reset_index()

# Calcular el promedio de todos los datos
promedio_general = mx_top['points/price'].mean()

# Crear el gr√°fico de dispersi√≥n de puntos/precio por bodega
plt.figure(figsize=(12, 6))
sns.scatterplot(data=mx_top, x='winery_x', y='points/price', alpha=0.7)

# Dibujar una l√≠nea que marque el promedio de todos los datos
plt.axhline(y=promedio_general, color='r', linestyle='--', label='Promedio general')

# Dibujar marcas ubicando los valores promedio por cada bodega
for i in range(len(medias)):
    plt.text(i, medias.iloc[i]['points/price'], f"{medias.iloc[i]['points/price']:.2f}", ha='center', va='bottom', fontsize=8, color='blue')

plt.xlabel('Bodega')
plt.ylabel('Puntos/Precio')
plt.title('Distribuci√≥n de Puntos/Precio por Bodega')
plt.xticks(rotation=90)
plt.legend()
plt.tight_layout()
plt.show()

"""#### &#9758; Si consideramos la proporci√≥n de los pa√≠ses con mejor relaci√≥n puntos/precio, ¬øc√≥mo queda M√©xico?
- Usa un gr√°fico de pastel
"""

# TU CODIGO
# Calcular el promedio general de puntos/precio
promedio_general = mx_top['points/price'].mean()

# Contar cu√°ntos vinos de cada pa√≠s est√°n por encima del promedio general
mejores_vinos_por_pais = mx_top[mx_top['points/price'] > promedio_general]['country'].value_counts()

# Crear un gr√°fico de pastel para mostrar la proporci√≥n de pa√≠ses con mejores vinos
plt.figure(figsize=(8, 8))
plt.pie(mejores_vinos_por_pais, labels=mejores_vinos_por_pais.index, autopct='%1.1f%%', startangle=140)
plt.title('Proporci√≥n de pa√≠ses con mejores vinos (puntos/precio)')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()

# Calcular el promedio general de puntos/precio
promedio_general = mx_top['points/price'].mean()

# Contar cu√°ntos vinos de M√©xico est√°n por encima del promedio general
mejores_vinos_mexico = (mx_top['country'] == 'Mexico') & (mx_top['points/price'] > promedio_general)

# Calcular la proporci√≥n de vinos de M√©xico con una relaci√≥n puntos/precio por encima del promedio general
proporcion_mexico = len(mx_top[mejores_vinos_mexico]) / len(mx_top)

# Crear un gr√°fico de pastel para mostrar la proporci√≥n de vinos de M√©xico con mejor relaci√≥n puntos/precio
plt.figure(figsize=(8, 8))
plt.pie([proporcion_mexico, 1 - proporcion_mexico], labels=['M√©xico', 'Otros pa√≠ses'], autopct='%1.1f%%', startangle=140)
plt.title('Proporci√≥n de vinos de M√©xico con mejor relaci√≥n puntos/precio')
plt.axis('equal')  # Equal aspect ratio ensures that pie is drawn as a circle.
plt.show()